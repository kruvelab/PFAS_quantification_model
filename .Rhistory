instrument = "Orbitrap",
source = "ESI",
solvent = "MeCN",#placeholder
SPLIT = "TRUE")%>%#placeholder
select(-IE, -`Theoretical conc. uM`)
colorder = colnames(datarbindedit)
old_training_data = old_training_data[,colorder]
old_training_data$SPLIT = as.character(old_training_data$SPLIT)
datarbindedit = datarbindedit%>%
rbind(old_training_data)%>%
unique()%>%
select(-SPLIT)
forsplit <- datarbindedit%>%
select(name) %>%
unique()
######re-calculating and joining descriptors
descs_recalc = datarbindedit %>%
rename(Compound = name) %>%
select(Compound, SMILES) %>%
unique()%>%
na.omit()
descs_recalc_go = PaDEL_original(descs_recalc)
datarbindedit = datarbindedit %>%
left_join(descs_recalc_go)
write_delim(descs_recalc_go,
"data/descs_recalc.csv",
delim = ",")
saveRDS(descs_recalc_go,
"descs_PFASadd.rds")
datarbindedit = datarbindedit %>%
select(Compound, SMILES,everything())
datarbindedit = datarbindedit %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
#cleaning data
datarbindeditAA = datarbindedit %>%
dplyr::select(-c(Compound, SMILES, name, organic_modifier,additive, instrument, source, solvent))%>%
select_if(~sum(is.na(.))< 10,)%>%
drop_na()
datarbindeditAAA = datarbindeditAA %>%
select(-c(nearZeroVar(datarbindeditAA, freqCut = 80/20)))
correlationMatrix <- cor(datarbindeditAAA, use = "complete.obs")
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
datarbindeditclean <- datarbindeditAAA %>%
dplyr::select(-highlyCorrelated)%>%
bind_cols(datarbindedit %>%
select(SMILES, name, organic_modifier,additive, instrument, source, solvent))%>%
select(name,SMILES,organic_modifier,organic_modifier_percentage,
additive, additive_concentration_mM, instrument,source,solvent, everything())
#splitting
set.seed(123)
split_first <- sample.split(forsplit$name, SplitRatio = 0.8)
train <- forsplit %>%
filter(split_first == TRUE)%>%
mutate(split_first = "TRUE") %>%
left_join(datarbindeditclean) %>%
unique()%>%
na.omit()
test <- forsplit %>%
filter(split_first == FALSE)%>%
mutate(split_first = "FALSE") %>%
left_join(datarbindeditclean) %>%
unique()%>%
na.omit()
datarbindeditclean <- rbind(train,test) %>%
na.omit()
#Training the model
set.seed(123)
folds = groupKFold(train$name, k = 5) #k - how many times
fitControl <- trainControl(method = "boot", index = folds)
RFR <-
train(`logIE`~ ., data = train %>%
select(-instrument, -source, -split_first,-name,-SMILES),
method = "xgbTree",
trControl = fitControl)
#determining most influential descriptors
variable_importance <- varImp(RFR)
variable_importance <- as.data.frame(variable_importance$importance)
variable_importance
saveRDS(RFR,"regressors/PFAS_FOREST.rds")
datarbind_with_predicted <- datarbindeditclean %>%
mutate( logIE_predicted = predict(RFR, newdata = datarbindeditclean))
datarbind_with_predicted <- datarbind_with_predicted %>%
arrange(instrument)
datarbind_with_predicted$split_first = factor(datarbind_with_predicted$split_first,
levels = c(TRUE, FALSE),
labels = c("Training set", "Test set"))
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_predicted),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_predicted),
color = "blue",
alpha = 0.5,
size = 3) +
labs(title = "Training set",
x = "Measured logIE",
y = "Predicted logIE")+
theme(axis.text = element_text(size=20),
plot.title = element_text(hjust = -0.015, size = 25, face = "italic"),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
axis.line.y = element_line(size = 1, color = "black"),
axis.line.x = element_line(size = 1, color = "black"),
axis.title.x = element_text(size=15, face = "italic", hjust = .25),
axis.title.y = element_text(size=15, face = "italic"))+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
data_for_split = datarbind_with_predicted %>%
select(name, split_first, instrument, logIE, logIE_predicted)%>%
rename(Compound =name)
data43254 = data_for_split %>% filter(instrument == "Orbitrap")
data43254 = data43254%>%
left_join(SMILES_data)
write_delim(data43254,
"data/test_train_split.csv",
delim = ",")
IE_slope_cor_PFAS = ggplot(data = data43254 %>%
filter(instrument == "Orbitrap")) +
geom_point(mapping = aes(x = logIE,y = logIE_predicted,
color = Compound,
size = 0.25,
shape = Class)) +
#scale_y_log10() +
theme(legend.position="right")+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor_PFAS
#Root mean squared error for whole dataset
rmse((datarbind_with_predicted %>% filter(split_first == "Training set"))$logIE,
(datarbind_with_predicted %>% filter(split_first == "Training set"))$logIE_predicted)
#0.46 with HFPO-DA
#0.26 without HFPO-DA
#0.24 without HFPO-DA and all mono PAPS
rmse((datarbind_with_predicted %>% filter(split_first == "Test set"))$logIE,
(datarbind_with_predicted %>% filter(split_first == "Test set"))$logIE_predicted)
#0.74" "
#0.64" "
#0.78" "
#Root mean squared error for PFAS only
rmse((datarbind_with_predicted %>% filter(instrument == "Orbitrap" & split_first == "Training set"))$logIE,
(datarbind_with_predicted %>% filter(instrument == "Orbitrap" & split_first == "Training set"))$logIE_predicted)
#0.69
#0.13
#0.12
rmse((datarbind_with_predicted %>% filter(instrument == "Orbitrap" & split_first == "Test set"))$logIE,
(datarbind_with_predicted %>% filter(instrument == "Orbitrap" & split_first == "Test set"))$logIE_predicted)
#0.50
#0.57
#0.49
graph_retrainPFAS=ggplotly(IE_slope_cor_PFAS)
graph_retrainPFAS
htmlwidgets::saveWidget(plotly::as_widget(graph_retrainPFAS), "1stryPFAScal.html")
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_predicted),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_predicted),
color = "blue",
alpha = 0.5,
size = 3) +
labs(title = "Training set",
x = "Measured logIE",
y = "Predicted logIE")+
theme(axis.text = element_text(size=20),
plot.title = element_text(hjust = -0.015, size = 25, face = "italic"),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
axis.line.y = element_line(size = 1, color = "black"),
axis.line.x = element_line(size = 1, color = "black"),
axis.title.x = element_text(size=15, face = "italic", hjust = .25),
axis.title.y = element_text(size=15, face = "italic"))+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
library(tidyverse)
library(plotly)
library(forcats)
setwd("~/GitHub/PFAS_semi_quant")
source("code/PaDEL_descs_calculator.R")
source("code/reading_excel.R")
source("code/compound_eluent.R")
regressor = readRDS("regressors/PFAS_FOREST.rds")
filename = "data/Batch 1 Semi Quant w frag PL4 rep.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Spiked_samples = Orbitrap_dataset_raw %>%
filter(Filename == "QCN-CL" | Filename == "QCN-BL" | Filename == "QCN-AL") %>%
select(-`Theoretical Amt`) %>%
na.omit()
#fetching absolute responses from tracefinder data
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
na.omit(Area) %>%
filter(Area != "N/F") %>%
mutate(Area = as.numeric(Area))
#Fetching theoretical concentrations, in pg/uL, consistent with the info in "Cal_1-8_Info_sheet"
#These levels were divided by two as the calibration curve is diluted by a factor of two when prepared
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
group_by(Compound) %>%
mutate(`Theoretical Amt`=case_when(
Filename=="2020071205-cal21"~mean(`Theoretical Amt`[Filename=="2020071205-cal22"]),
TRUE~`Theoretical Amt`
))%>%ungroup()
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
rename("Theoretical_pg/uL" = "Theoretical Amt")
SMILES_data = read_delim("data/Smiles_for_Target_PFAS_semicolon.csv",
delim = ";",
col_names = TRUE)
SMILES_data = SMILES_data %>%
rename(Compound = ID) %>%
select(Compound, SMILES, Class) %>%
na.omit()
View(SMILES_data)
#remove adducts + HPFODA + monoPAPs
SMILES_data = SMILES_data[-c(2,6,9,13,17,23,26),]
#eluent---
eluent = read_delim("data/eluent.csv",
delim = ",",
col_names = TRUE)
organic_modifier = "MeCN"
pH.aq. = 7.0
descs <- read_delim("data/descs_recalc.csv")
descs = descs %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
data = Orbitrap_dataset_raw %>%
left_join(descs)
data = data %>%
group_by(Compound) %>%
mutate(RT = mean(RT)) %>%
ungroup()
data = data %>%
mutate(
RT = as.numeric(RT),
area_IC = Area*IC,
organic_modifier = organic_modifier,
pH.aq. = pH.aq.,
NH4 = 1, #1 if the buffer contains NHÂ¤ ions , 0 if not.
organic = organicpercentage(eluent,RT),
viscosity = viscosity(organic,organic_modifier),
surface_tension = surfacetension(organic,organic_modifier),
polarity_index = polarityindex(organic,organic_modifier))
training = data %>%
filter(!is.na(SMILES)) %>%
filter(`Theoretical_pg/uL` != "N/F") %>%
filter(`Theoretical_pg/uL` != "N/A") %>%
mutate(`Theoretical_pg/uL` = as.numeric(`Theoretical_pg/uL`)) %>%
mutate(`Theoretical conc. uM` = `Theoretical_pg/uL`/MW) #convert to molar concentration
ggplot(data = training) +
geom_point(mapping = aes(x = `Theoretical conc. uM`,
y = area_IC)) +
facet_wrap(~Compound, scales = "free") +
scale_x_log10() +
scale_y_log10()
training = training %>%
group_by(SMILES) %>%
mutate(slope = linear_regression(area_IC, `Theoretical conc. uM`)$slope) %>%
ungroup()
IE_pred = training %>%
mutate(logIE_pred = 0) %>%
rename(organic_modifier_percentage = organic,
"name" = Compound)%>%
mutate(additive = "ammoniumacetate",
additive_concentration_mM = 2,
instrument = "Orbitrap",
source = "ESI",
solvent = "MeCN",#placeholder
SPLIT = "TRUE")%>%#placeholder
select(name,SMILES, 1451:1460,everything(),
-Filename,-RT,)%>%#-`Theoretical Amt`)%>%
na.omit()
IE_pred = IE_pred%>%
unique()
#regressor predicts logIE values for target PFAS
IE_pred <- IE_pred %>%
mutate(logIE_pred = predict(regressor, newdata = IE_pred, predict.all = TRUE)) %>%
select(SMILES,logIE_pred, everything())
IE_pred = IE_pred %>%
left_join(SMILES_data) %>%
select(name, SMILES, Class, logIE_pred, slope, everything(),-Compound)
correlation_factor = lm(log10(slope)~logIE_pred,data = IE_pred)
IE_pred = IE_pred %>%
mutate(response_factor = correlation_factor$coefficients[2]*logIE_pred +
correlation_factor$coefficients[1])%>%
mutate(pred_conc.uM= area_IC/(10^response_factor))%>%
left_join(training)%>%
mutate(error_factor = case_when(pred_conc.uM < `Theoretical conc. uM` ~ `Theoretical conc. uM`/pred_conc.uM,
pred_conc.uM >`Theoretical conc. uM` ~ pred_conc.uM/`Theoretical conc. uM`))%>%
mutate(less_than_ten = case_when(error_factor < 10 ~ TRUE,
error_factor > 10 ~ FALSE))
#mean between 36 compounds, 572 datapoints
IE_pred %>% select(name) %>% unique()
mean_error_factor <- mean(IE_pred$error_factor, na.rm = TRUE)
Conc._error_boxplots = ggplot(data = IE_pred) +
geom_boxplot(mapping = aes(x = Class,
y = error_factor))
Conc._error_boxplots +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
concentration_cor_plot = ggplot(data = IE_pred %>%
filter(instrument == "Orbitrap")) +
geom_point(mapping = aes(x = `Theoretical conc. uM`,
y = pred_conc.uM,
#text = name,
color = name)) +
scale_y_log10("pred_conc.molar",10) +
scale_x_log10("Theoretical Amt molar",10) +
theme(legend.position="none")+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~Class)
concentration_cor_plot
Spiked_samples = Spiked_samples %>%
rename("Sample ID" = Filename,
name = Compound)
#all spiked PFAS
Spiked_samples = Spiked_samples[-c(7:9,16:18,28:30,40,56:58,65:67,101:103,107:109),]
IE_prededit <- IE_pred %>%
select(name, SMILES, logIE_pred,IC,MW, Class)
IE_prededit <- IE_prededit %>%
unique()
Spiked_samples = Spiked_samples %>%
left_join(IE_prededit) %>%
mutate(area_IC = Area*IC)
Spiked_samples = Spiked_samples %>%
mutate(response_factor3 = correlation_factor$coefficients[2]*logIE_pred +
correlation_factor$coefficients[1])%>%
mutate(pred_conc.uM = area_IC/(10^response_factor3))
Spiked_samples = Spiked_samples %>%
mutate(pred_conc_pg_uL = pred_conc.uM*MW)%>%
select(pred_conc_pg_uL, everything())%>%
mutate(predicted_mass_ng = case_when(
`Sample ID` == "QCN-AL" ~ (pred_conc_pg_uL*1097.2010178117)/1000,
`Sample ID` == "QCN-BL" ~ (pred_conc_pg_uL*961.704834605598)/1000,
`Sample ID` == "QCN-CL" ~ (pred_conc_pg_uL*952.162849872773)/1000,
TRUE ~ (pred_conc_pg_uL*1000)/1000))%>%
select(predicted_mass_ng, everything())
Spiked_samples = Spiked_samples %>%
group_by(name)%>%
mutate(`predicted mass (ng)`= mean(predicted_mass_ng))%>%
mutate(mean_Area = mean(Area))%>%
mutate(SD = sd(Area),
RSD= SD/mean_Area)%>%
ungroup()
Spiked_samples = Spiked_samples %>%
group_by(name)%>%
mutate(upperwhisk= sqrt((`predicted mass (ng)`*(mean_error_factor-1))^2)+((RSD*`predicted mass (ng)`)^2))%>%
ungroup()
Spiked_samples = Spiked_samples%>%
group_by(name)%>%
mutate(lowerwhisk= sqrt((`predicted mass (ng)`*(1-(1/mean_error_factor))^2)+((RSD*`predicted mass (ng)`)^2)))%>%
ungroup()
#organizing by chain length
x <- Spiked_samples$SMILES
c.atoms <- lengths(regmatches(x, gregexpr("C",x)))
catoms. <- data.frame(c.atoms)
Spiked_samples <- cbind(catoms., Spiked_samples)
spike_amounts = read_delim("data/spike_amounts.csv",
delim = ",",
col_names = TRUE)
Spiked_samples = Spiked_samples %>%
left_join(spike_amounts)
Spiked_samples = Spiked_samples %>%
mutate(order= case_when(Class=="Chlorinated polyfluorinated ether sulfonates"~9,
Class=="Perfluorinated ether carboxylic acids"~8,
Class=="Perfluoroalkane sulfonamides"~6,
Class=="Perfluoroalkane sulfonamidoacetic acids"~5,
Class=="Perfluoro sulfonic acid"~4,
Class=="Perfluoro carboxylic acid"~3,
Class=="Fluorotelomer phosphate ester"~7,
Class=="Fluorotelomer carboxylic acid"~2,
Class=="Fluorotelomer sulfonic acid"~1))
yticks <- c(0, 5, 10, 15, 20, 30, 40, 100, 130, 140)
ggplot(data = Spiked_samples %>%
mutate(name1=fct_reorder(name,c.atoms)),
mapping = aes(x = reorder(name1,order),
y = `predicted mass (ng)`,
color = "")) +
geom_bar(position = "dodge", stat = "identity", fill="skyblue", color="deepskyblue4") +
geom_errorbar(aes(x = name1,
ymin = ifelse(`predicted mass (ng)`-lowerwhisk<0,0, `predicted mass (ng)`-lowerwhisk),
ymax = `predicted mass (ng)`+upperwhisk),
width=0.3, color="orange", size=1)+
geom_errorbar(aes(x=name1, ymin=total_measured_ng, ymax=total_measured_ng),
size=2, color="dodgerblue4")+
labs(x = "", y = "", color = "") +
theme(text = element_text(size=20),
axis.text.x = element_text(angle = 45, vjust = 1,hjust = 1),
axis.ticks.length.x = unit(.5, "cm"),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = "white"),
axis.line.y = element_line(size = 1, color = "black"),
legend.position = "none")+
scale_y_continuous(expand = c(0, 0), limits = c(0, 200), breaks=yticks, labels=yticks)
ggplot(data = Spiked_samples %>%
mutate(name1=fct_reorder(name,c.atoms)),
mapping = aes(x = reorder(name1,order),
y = `predicted mass (ng)`,
color = "")) +
geom_bar(position = "dodge", stat = "identity", fill="skyblue", color="deepskyblue4") +
geom_errorbar(aes(x = name1,
ymin = ifelse(`predicted mass (ng)`-lowerwhisk<0,0, `predicted mass (ng)`-lowerwhisk),
ymax = `predicted mass (ng)`+upperwhisk),
width=0.3, color="orange", size=1)+
geom_errorbar(aes(x=name1, ymin=total_measured_ng, ymax=total_measured_ng),
size=2, color="dodgerblue4")+
labs(x = "", y = "ng", color = "") +
theme(text = element_text(size=20),
axis.text.x = element_text(angle = 45, vjust = 1,hjust = 1),
axis.ticks.length.x = unit(.5, "cm"),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = "white"),
axis.line.y = element_line(size = 1, color = "black"),
legend.position = "none")+
scale_y_continuous(expand = c(0, 0), limits = c(0, 200), breaks=yticks, labels=yticks)
Spiked_samples = Spiked_samples %>%
filter(Area != 0)%>%
mutate(error_factor = case_when(predicted_mass_ng < 5 ~ 5/predicted_mass_ng,
predicted_mass_ng >5 ~ predicted_mass_ng/5))%>%
mutate(less_than_ten = case_when(error_factor < 10 ~ TRUE,
error_factor > 10 ~ FALSE))
QCN_error_boxplots = ggplot(data = IE_pred) +
geom_boxplot(mapping = aes(x = Class,
y = error_factor))
QCN_error_boxplots = ggplot(data = IE_pred) +
geom_boxplot(mapping = aes(x = Class,
y = error_factor))
QCN_error_boxplots +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
#predicting concentrations for detected suspects
suspSMILES_data = read_delim("data/sus_data.csv",
delim = ",",
col_names = TRUE,)
descs_PFAS_suspects = PaDEL_original(suspSMILES_data %>% select(SMILES) %>% unique())
write_delim(descs_PFAS_suspects,
"data/descs_PFAS_suspects.csv",
delim = ",")
suspSMILES_data = suspSMILES_data %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
suspSMILES_data = suspSMILES_data %>%
mutate(
RT = as.numeric(RT),
area_IC = Area*IC,
organic_modifier = organic_modifier,
pH.aq. = pH.aq.,
NH4 = 1, #1 if the buffer contains NHÂ¤ ions , 0 if not.
organic = organicpercentage(eluent,RT),
viscosity = viscosity(organic,organic_modifier),
surface_tension = surfacetension(organic,organic_modifier),
polarity_index = polarityindex(organic,organic_modifier))
suspSMILES_data =  suspSMILES_data %>%
left_join(descs_PFAS_suspects, by = "SMILES")%>%
rename(organic_modifier_percentage = organic)%>%
mutate(additive = "ammoniumacetate",
additive_concentration_mM = 2,
instrument = "Orbitrap",
source = "ESI",
solvent = "MeCN",#placeholder
SPLIT = "TRUE")%>%#placeholder
select(name,SMILES,everything())%>%
na.omit()
suspSMILES_data =  suspSMILES_data %>%
mutate(logIE_pred2 = predict(regressor, newdata = suspSMILES_data, predict.all = TRUE)) %>%
select(SMILES,logIE_pred2, everything())
suspSMILES_data =  suspSMILES_data %>%
mutate(response_factor2 = correlation_factor$coefficients[2]*logIE_pred2 +
correlation_factor$coefficients[1])%>%
mutate(pred_conc.molar = area_IC/(10^response_factor2))
suspSMILES_data =  suspSMILES_data %>%
mutate(pred_conc_pg_uL = pred_conc.molar*MW.x)%>%
select(pred_conc_pg_uL, everything())
predicted_conc.= suspSMILES_data %>%
select(pred_conc_pg_uL, name, `Sample ID`,SMILES,MW.x,`Ex vol.`, `sample weight`)
predicted_conc.= predicted_conc.%>%
group_by(`Sample ID`)%>%
arrange(.by_group = TRUE, "Sample ID")%>%
ungroup()
#count number of F atoms
x <- suspSMILES_data$SMILES
f.atoms <- lengths(regmatches(x, gregexpr("F",x)))
fatoms. <- data.frame(f.atoms)
blended <- cbind(fatoms., predicted_conc.)
#convert to predicted ng F/g
blended <- blended %>%
mutate(mass_F = f.atoms*19,
percent.F=mass_F/MW.x,
"Predicted ng_F/uL"= (percent.F*pred_conc_pg_uL)/1000,
pred_ng_F_g = (`Predicted ng_F/uL`*`Ex vol.`)/`sample weight`)
blended <- blended %>%
group_by(`Sample ID`)%>%
mutate(sum_suspects_ng_F_g = sum(pred_ng_F_g))%>%
ungroup()
write_delim(blended,
"data/suspect semi-quant amounts.csv",
delim = ",")
