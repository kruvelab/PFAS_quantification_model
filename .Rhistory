labs(x = "") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
Spiked_samples = Spiked_samples %>%
filter(Area != 0)%>%
mutate(error_factor = case_when(predicted_mass_ng < 5 ~ 5/predicted_mass_ng,
predicted_mass_ng >5 ~ predicted_mass_ng/5))%>%
mutate(less_than_ten = case_when(error_factor < 10 ~ TRUE,
error_factor > 10 ~ FALSE))
mean(Spiked_samples$error_factor, na.rm = TRUE)
filename = "data/Batch 1 Semi Quant w frag PL4 rep.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Spiked_samples = Orbitrap_dataset_raw %>%
filter(Filename == "QCN-CL" | Filename == "QCN-BL" | Filename == "QCN-AL" | Filename == "PL-4") %>%
select(-`Theoretical Amt`) %>%
na.omit()
Spiked_samples = Spiked_samples %>%
rename("Sample ID" = Filename,
name = Compound)
#Spiked_samples = Spiked_samples[-c(1:3,7:12,17:25,29:42,46:52,59:73,127:138,112:114,119:122),] #structurally relevant
#Spiked_samples = Spiked_samples[-c(36:38,42,68:70,112:114,119:122),] #all spiked PFAS
Spiked_samples = Spiked_samples[-c(1:3,7:12,17:25,29:42,46:52,59:73,74:138),] #only fluorotelomers
IE_prededit <- IE_pred %>%
select(name, SMILES, logIE_pred,IC,MW)
IE_prededit <- IE_prededit %>%
unique()
blank_areas = Spiked_samples %>%
select(name) %>%
unique() %>%
left_join(Spiked_samples %>%
filter(`Sample ID` == "PL-4") %>%
select(name, Area)) %>%
mutate(Area = case_when(
is.na(Area) ~ 0,
TRUE ~ Area)) %>%
rename(Area_background = Area)
Spiked_samples = Spiked_samples %>%
left_join(IE_prededit) %>%
left_join(blank_areas) %>%
mutate(Area = Area - Area_background,
area_IC = Area*IC)
Spiked_samples = Spiked_samples %>%
mutate(response_factor3 = correlation_factor$coefficients[2]*logIE_pred +
correlation_factor$coefficients[1])%>%
mutate(pred_conc. = area_IC/(10^response_factor3))
Spiked_samples = Spiked_samples %>%
mutate(pred_conc_pg_uL = pred_conc.*MW)%>%
select(pred_conc_pg_uL, everything())%>%
mutate(predicted_mass_ng = case_when(
`Sample ID` == "QCN-AL" ~ (pred_conc_pg_uL*1097.2010178117)/1000,
`Sample ID` == "QCN-BL" ~ (pred_conc_pg_uL*961.704834605598)/1000,
`Sample ID` == "QCN-CL" ~ (pred_conc_pg_uL*952.162849872773)/1000,
TRUE ~ (pred_conc_pg_uL*1000)/1000))%>%
select(predicted_mass_ng, everything())
ggplot(data = Spiked_samples %>%
filter(`Sample ID` != "PL-4"),
mapping = aes(x = name,
y = predicted_mass_ng,
fill = `Sample ID`)) +
geom_bar(position = "dodge", stat = "identity") +
geom_abline(slope = 0, intercept = 5) +
labs(x = "") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
Spiked_samples = Spiked_samples %>%
filter(Area != 0)%>%
mutate(error_factor = case_when(predicted_mass_ng < 5 ~ 5/predicted_mass_ng,
predicted_mass_ng >5 ~ predicted_mass_ng/5))%>%
mutate(less_than_ten = case_when(error_factor < 10 ~ TRUE,
error_factor > 10 ~ FALSE))
mean(Spiked_samples$error_factor, na.rm = TRUE)
filename = "data/Batch 1 Semi Quant w frag PL4 rep.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Spiked_samples = Orbitrap_dataset_raw %>%
filter(Filename == "QCN-CL" | Filename == "QCN-BL" | Filename == "QCN-AL" | Filename == "PL-4") %>%
select(-`Theoretical Amt`) %>%
na.omit()
Spiked_samples = Spiked_samples %>%
rename("Sample ID" = Filename,
name = Compound)
#Spiked_samples = Spiked_samples[-c(1:3,7:12,17:25,29:42,46:52,59:73,127:138,112:114,119:122),] #structurally relevant
#Spiked_samples = Spiked_samples[-c(36:38,42,68:70,112:114,119:122),] #all spiked PFAS
Spiked_samples = Spiked_samples[-c(1:3,7:12,17:25,29:42,46:52,59:73,74:138),] #only fluorotelomers
IE_prededit <- IE_pred %>%
select(name, SMILES, logIE_pred,IC,MW)
IE_prededit <- IE_prededit %>%
unique()
blank_areas = Spiked_samples %>%
select(name) %>%
unique() %>%
left_join(Spiked_samples %>%
filter(`Sample ID` == "PL-4") %>%
select(name, Area)) %>%
mutate(Area = case_when(
is.na(Area) ~ 0,
TRUE ~ Area)) %>%
rename(Area_background = Area)
Spiked_samples = Spiked_samples %>%
left_join(IE_prededit) %>%
left_join(blank_areas) %>%
mutate(Area = Area - Area_background,
area_IC = Area*IC)
Spiked_samples = Spiked_samples %>%
mutate(response_factor3 = correlation_factor$coefficients[2]*logIE_pred +
correlation_factor$coefficients[1])%>%
mutate(pred_conc. = area_IC/(10^response_factor3))
Spiked_samples = Spiked_samples %>%
mutate(pred_conc_pg_uL = pred_conc.*MW)%>%
select(pred_conc_pg_uL, everything())%>%
mutate(predicted_mass_ng = case_when(
`Sample ID` == "QCN-AL" ~ (pred_conc_pg_uL*1097.2010178117)/1000,
`Sample ID` == "QCN-BL" ~ (pred_conc_pg_uL*961.704834605598)/1000,
`Sample ID` == "QCN-CL" ~ (pred_conc_pg_uL*952.162849872773)/1000,
TRUE ~ (pred_conc_pg_uL*1000)/1000))%>%
select(predicted_mass_ng, everything())
ggplot(data = Spiked_samples %>%
filter(`Sample ID` != "PL-4"),
mapping = aes(x = name,
y = predicted_mass_ng,
fill = `Sample ID`)) +
geom_bar(position = "dodge", stat = "identity") +
geom_abline(slope = 0, intercept = 5) +
labs(x = "") +
theme(text = element_text(size=20),
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
filename = "data/Batch 1 Semi Quant w frag PL4 rep.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Spiked_samples = Orbitrap_dataset_raw %>%
filter(Filename == "QCN-CL" | Filename == "QCN-BL" | Filename == "QCN-AL" | Filename == "PL-4") %>%
select(-`Theoretical Amt`) %>%
na.omit()
Spiked_samples = Spiked_samples %>%
rename("Sample ID" = Filename,
name = Compound)
#Spiked_samples = Spiked_samples[-c(1:3,7:12,17:25,29:42,46:52,59:73,127:138,112:114,119:122),] #structurally relevant
Spiked_samples = Spiked_samples[-c(36:38,42,68:70,112:114,119:122),] #all spiked PFAS
IE_prededit <- IE_pred %>%
select(name, SMILES, logIE_pred,IC,MW)
IE_prededit <- IE_prededit %>%
unique()
blank_areas = Spiked_samples %>%
select(name) %>%
unique() %>%
left_join(Spiked_samples %>%
filter(`Sample ID` == "PL-4") %>%
select(name, Area)) %>%
mutate(Area = case_when(
is.na(Area) ~ 0,
TRUE ~ Area)) %>%
rename(Area_background = Area)
Spiked_samples = Spiked_samples %>%
left_join(IE_prededit) %>%
left_join(blank_areas) %>%
mutate(Area = Area - Area_background,
area_IC = Area*IC)
Spiked_samples = Spiked_samples %>%
mutate(response_factor3 = correlation_factor$coefficients[2]*logIE_pred +
correlation_factor$coefficients[1])%>%
mutate(pred_conc. = area_IC/(10^response_factor3))
Spiked_samples = Spiked_samples %>%
mutate(pred_conc_pg_uL = pred_conc.*MW)%>%
select(pred_conc_pg_uL, everything())%>%
mutate(predicted_mass_ng = case_when(
`Sample ID` == "QCN-AL" ~ (pred_conc_pg_uL*1097.2010178117)/1000,
`Sample ID` == "QCN-BL" ~ (pred_conc_pg_uL*961.704834605598)/1000,
`Sample ID` == "QCN-CL" ~ (pred_conc_pg_uL*952.162849872773)/1000,
TRUE ~ (pred_conc_pg_uL*1000)/1000))%>%
select(predicted_mass_ng, everything())
ggplot(data = Spiked_samples %>%
filter(`Sample ID` != "PL-4"),
mapping = aes(x = name,
y = predicted_mass_ng,
fill = `Sample ID`)) +
geom_bar(position = "dodge", stat = "identity") +
geom_abline(slope = 0, intercept = 5) +
labs(x = "") +
theme(text = element_text(size=20),
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
View(Spiked_samples)
Spiked_samples = Spiked_samples %>%
filter(Area != 0)%>%
mutate(error_factor = case_when(predicted_mass_ng < 5 ~ 5/predicted_mass_ng,
predicted_mass_ng >5 ~ predicted_mass_ng/5))%>%
mutate(less_than_ten = case_when(error_factor < 10 ~ TRUE,
error_factor > 10 ~ FALSE))
mean(Spiked_samples$error_factor, na.rm = TRUE)
library(caret)
library(xgboost)
library(tidyverse)
library(plotly)
setwd("~/GitHub/PFOA_semi_quant")
source("code/PaDEL_descs_calculator.R")
source("code/reading_excel.R")
source("code/compound_eluent.R")
filename = "data/Batch 1 Semi Quant w frag.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
na.omit(Area) %>%
filter(Area != "N/F") %>%
mutate(Area = as.numeric(Area))
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
group_by(Compound) %>%
mutate(`Theoretical Amt`=case_when(
Filename=="2020071205-cal21"~mean(`Theoretical Amt`[Filename=="2020071205-cal22"]),
TRUE~`Theoretical Amt`
))%>%
ungroup()
SMILES_data = read_delim("data/Smiles_for_Target_PFAS_semicolon.csv",
delim = ";",
col_names = TRUE)
SMILES_data = SMILES_data %>%
rename(Compound = ID) %>%
select(Compound, SMILES, Class) %>%
na.omit()
SMILES_data = SMILES_data %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
#removing adducts from dataset
SMILES_data = SMILES_data[-c(17,26),]
#eluent---
eluent = read_delim("data/eluent.csv",
delim = ",",
col_names = TRUE)
organic_modifier = "MeCN"
pH.aq. = 7.0
data = Orbitrap_dataset_raw %>%
left_join(SMILES_data)
data = data %>%
mutate(
RT = as.numeric(RT),
area_IC = Area*IC,
organic_modifier = organic_modifier,
pH.aq. = pH.aq.,
NH4 = 1, #1 if the buffer contains NHÂ¤ ions , 0 if not.
organic = organicpercentage(eluent,RT),
viscosity = viscosity(organic,organic_modifier),
surface_tension = surfacetension(organic,organic_modifier),
polarity_index = polarityindex(organic,organic_modifier))
training = data %>%
filter(!is.na(SMILES)) %>%
filter(`Theoretical Amt` != "N/F") %>%
filter(`Theoretical Amt` != "N/A") %>%
mutate(`Theoretical Amt` = as.numeric(`Theoretical Amt`)) %>%
mutate(`Theoretical Amt` = `Theoretical Amt`/MW) #correct with MW
ggplot(data = training) +
geom_point(mapping = aes(x = `Theoretical Amt`,
y = area_IC)) +
facet_wrap(~Compound, scales = "free") +
scale_x_log10() +
scale_y_log10()
training = training %>%
group_by(SMILES) %>%
mutate(slope = linear_regression(area_IC, `Theoretical Amt`)$slope) %>%
ungroup()
filename = "data/IE_training_data/190714_negative_model_logIE_data.csv"
old_training_data = read_delim(filename,
delim = ";",
col_names = TRUE)
old_training_data = old_training_data%>%
select(-pH_aq, -logIE_pred, -error_abs)
old_training_data_filtered = old_training_data %>%
filter(organic_modifier=="MeCN",
name=="perfluorooctanesulfonic acid",
additive=="ammonium acetate",
pH.aq.==7.8)
IEPFOSvalue = old_training_data_filtered$logIE
Anchor_slope = training %>%
select(Compound,slope) %>%
unique()%>%
filter(Compound == "PFOS")
slopePFOS <- Anchor_slope$slope #make slopePFOS a single value
training = training %>%
mutate(RIE =slope/slopePFOS,
RIE =log(RIE),
IE =RIE + IEPFOSvalue)%>%
select(Compound,3:6, IE,slope,everything(),-RIE)
datarbind = training%>%
select(everything(),-"Theoretical Amt", -Area, -area_IC, -IC, -Filename, -MW, -Class, )%>%
unique()%>%
group_by(Compound) %>%
mutate(RT=mean(RT))%>%
ungroup()
datarbind = datarbind%>%
group_by(Compound)%>%
mutate(polarity_index=mean(polarity_index),
organic=mean(organic),
viscosity=mean(viscosity),
surface_tension=mean(surface_tension))%>%
ungroup()%>%
unique()
datarbindedit = datarbind%>%
rename(organic_modifier_percentage = organic,
"name" = Compound)%>%
select(-RT, -slope)
datarbindedit = datarbindedit%>%
mutate(additive = "ammoniumacetate",
additive_concentration_mM = 2,
logIE = IE,
instrument = "Orbitrap",
source = "ESI",
solvent = "MeCN",#placeholder
SPLIT = "TRUE")%>%#placeholder
select(-IE)
colorder = colnames(datarbindedit)
old_training_data = old_training_data[,colorder]
old_training_data$SPLIT = as.character(old_training_data$SPLIT)
datarbindedit = datarbindedit%>%
rbind(old_training_data)%>%
unique()%>%
select(-SPLIT)
forsplit <- datarbindedit%>%
select(name) %>%
unique()
descs_recalc = datarbindedit %>%
rename(Compound = name) %>%
select(Compound, SMILES) %>%
unique()%>%
na.omit()
descs_recalc_go = PaDEL_original(descs_recalc)
datarbindedit = datarbindedit %>%
left_join(descs_recalc_go)
View(datarbindedit)
write_delim(descs_recalc_go,
"data/descs_recalc.csv",
delim = ",")
saveRDS(descs_recalc_go,
"descs_PFASadd.rds")
datarbindedit = datarbindedit %>%
select(Compound, SMILES,everything())
datarbindedit = datarbindedit %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
datarbindeditAA = datarbindedit %>%
dplyr::select(-c(Compound, SMILES, name, organic_modifier,additive, instrument, source, solvent))%>%
select_if(~sum(is.na(.))< 10,)%>%
drop_na()
datarbindeditAAA = datarbindeditAA %>%
select(-c(nearZeroVar(datarbindeditAA, freqCut = 80/20)))
correlationMatrix <- cor(datarbindeditAAA, use = "complete.obs")
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
datarbindeditclean <- datarbindeditAAA %>%
dplyr::select(-highlyCorrelated)%>%
bind_cols(datarbindedit %>%
select(SMILES, name, organic_modifier,additive, instrument, source, solvent))%>%
select(name,SMILES,organic_modifier,organic_modifier_percentage,
additive, additive_concentration_mM, instrument,source,solvent, everything())
set.seed(123)
split_first <- sample.split(forsplit$name, SplitRatio = 0.8)
train <- forsplit %>%
filter(split_first == TRUE)%>%
mutate(split_first = "TRUE") %>%
left_join(datarbindeditclean) %>%
unique()%>%
na.omit()
test <- forsplit %>%
filter(split_first == FALSE)%>%
mutate(split_first = "FALSE") %>%
left_join(datarbindeditclean) %>%
unique()%>%
na.omit()
datarbindeditclean <- rbind(train,test) %>%
na.omit()
#Training the model
set.seed(123)
folds = groupKFold(train$name, k = 5) #k - how many times
fitControl <- trainControl(method = "boot", index = folds)
RFR <-
train(`logIE`~ ., data = train %>%
select(-instrument, -source, -split_first,-name,-SMILES),
method = "xgbTree",
trControl = fitControl)
saveRDS(RFR,
"regressors/PFAS_FOREST.rds")
datarbind_with_predicted <- datarbindeditclean %>%
mutate( logIE_pred = predict(RFR, newdata = datarbindeditclean))
datarbind_with_predicted <- datarbind_with_predicted %>%
arrange(instrument)
datarbind_with_predicted$split_first = factor(datarbind_with_predicted$split_first,
levels = c(TRUE, FALSE),
labels = c("Training set", "Test set"))
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "blue",
alpha = 0.5,
size = 3) +
#scale_y_log10() +
theme(legend.position="none",
text = element_text(size=10))+
theme_classic()+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "blue",
alpha = 0.5,
size = 3) +
#scale_y_log10() +
theme(legend.position="none",
text = element_text(size=20))+
theme_classic()+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "blue",
alpha = 0.5,
size = 3) +
#scale_y_log10() +
theme(legend.position="none")+
theme_classic(text = element_text(size=20))+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "blue",
alpha = 0.5,
size = 3) +
#scale_y_log10() +
theme(legend.position="none")+
theme_classic(base_size = 10)+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_pred),
color = "blue",
alpha = 0.5,
size = 3) +
#scale_y_log10() +
theme(legend.position="none")+
theme_classic(base_size = 20)+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
datarbind_with_predicted <- datarbindeditclean %>%
mutate( logIE_predicted = predict(RFR, newdata = datarbindeditclean))
datarbind_with_predicted <- datarbind_with_predicted %>%
arrange(instrument)
datarbind_with_predicted$split_first = factor(datarbind_with_predicted$split_first,
levels = c(TRUE, FALSE),
labels = c("Training set", "Test set"))
IE_slope_cor = ggplot() +
geom_point(data = datarbind_with_predicted %>%
filter(instrument != "Orbitrap"),
mapping =aes(logIE, logIE_predicted),
color = "light grey",
alpha = 0.5,
size = 3) +
geom_point(data = datarbind_with_predicted %>%
filter(instrument == "Orbitrap"),
mapping =aes(logIE, logIE_predicted),
color = "blue",
alpha = 0.5,
size = 3) +
#scale_y_log10() +
theme(legend.position="none")+
theme_classic(base_size = 20)+
geom_abline(slope = 1, intercept = 0)+
facet_wrap(~split_first)
IE_slope_cor
