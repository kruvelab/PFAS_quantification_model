"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"text", "text"))
View(Batch_1_Bis_R_test)
warnings()
wholeFile<-read.xlsx(fileName)
saveFile=FALSE
require(openxlsx)
#require(dplyr)
#require(reshape)
options(java.parameters = "-Xmx4g" )
fileName<-file.choose(Batch_1_Bis_R_test)
saveName=fileName
wholeFile<-read.xlsx(fileName)
sheetNames<- getSheetNames(fileName)
n_comp<-length(sheetNames)
sampleNames<-list()
sampleCol<-which(colnames(wholeFile)=="Filename")
for(i in 1:length(wholeFile[,1])){                     #####3:1000 if LongReport
sampleNames[i]<-wholeFile[i,sampleCol]
collectedData<-list()
colFetch<-list()
colFetch[[1]]<-"Area"
colFetch[[2]]<-"Calculated.Amt"
for(x in 1:2){
wbList<-list()
expDF<-data.frame(matrix(NA,nrow=(length(sampleNames)+1),ncol=(n_comp+1)))
xlsxFile<-system.file(fileName, package = "openxlsx")
sampleLength<-length(sampleNames)
for(i in 1:n_comp){
wbList[[i]]<-read.xlsx(fileName, i, rows=c(2:(sampleLength+1)), cols=which(colnames(wholeFile)==colFetch[[x]]), colNames=FALSE, rowNames=FALSE) ###cols=c(15) if LongReport (This is for Area)
for(i in 2:(length(sampleNames)+1)){
expDF[i,1]<-sampleNames[i-1]
expDF[1,-1]<-sheetNames[1:n_comp]
#Loop for areas and export
for(i in 1:(n_comp)){
expDF[-1,i+1]<-wbList[[i]]
}
collectedData[[x]]<-expDF
#colnames(collectedData[[x]])<-collectedData[[x]][1,]
#collectedData[[x]]<-collectedData[[x]][-1,]
}
##Building a new xlsx-file containing the old workbook + the two new worksheets
wb<-loadWorkbook(fileName)
for(i in 1:2){
addWorksheet(wb, colFetch[[i]])
writeData(wb,(n_comp+i),collectedData[[i]], colNames=FALSE)
}
##Exporting data to the filename specified and the sheet-name specified##
saveWorkbook(wb,fileName,overwrite=TRUE)
library(readxl)
Batch_1_Bis_R_test <- read_excel("C:/Users/Labuser/Desktop/Batch 1 Bis R test.xlsx",
col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"text", "numeric", "numeric", "text",
"text", "text", "text", "text", "text",
"text", "numeric", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"text", "text"))
View(Batch_1_Bis_R_test)
saveFile=FALSE
require(openxlsx)
require(dplyr)
require(reshape)
options(java.parameters = "-Xmx4g" )
fileName<-file.choose(Batch_1_Bis_R_test)
saveName=fileName
library(readxl)
Batch_1_Bis_R_test <- read_excel("C:/Users/Labuser/Desktop/Batch 1 Bis R test.xlsx",
col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"text", "numeric", "numeric", "text",
"text", "text", "text", "text", "text",
"text", "numeric", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"text", "text"))
View(Batch_1_Bis_R_test)
saveFile=FALSE
require(openxlsx)
require(dplyr)
require(reshape)
options(java.parameters = "-Xmx4g" )
fileName<-file.choose()
saveName=fileName
wholeFile<-read.xlsx(fileName)
sheetNames<- getSheetNames(fileName)
n_comp<-length(sheetNames)
sampleNames<-list()
sampleCol<-which(colnames(wholeFile)==Batch_1_Bis_R_test)
for(i in 1:length(wholeFile[,1])){                     #####3:1000 if LongReport
sampleNames[i]<-wholeFile[i,sampleCol]
sampleNames<-list()
sampleCol<-which(colnames(wholeFile)=="Filename")
for(i in 1:length(wholeFile[,1])){                     #####3:1000 if LongReport
sampleNames[i]<-wholeFile[i,sampleCol]
}
collectedData<-list()
colFetch<-list()
colFetch[[1]]<-"Area"
colFetch[[2]]<-"Calculated.Amt 1"
for(i in 1:length(wholeFile[,1]))                    ###3:1000 if LongReport
sampleNames[i]<-wholeFile[i,sampleCol]
View(wholeFile)
sampleNames<-list()
sampleCol<-which(colnames(wholeFile)=="Filename")
library(readxl)
Batch_1_Bis_R_test <- read_excel("C:/Users/Labuser/Desktop/Batch 1 Bis R test.xlsx",
col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"text", "numeric", "numeric", "text",
"text", "text", "text", "text", "text",
"text", "numeric", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"text", "text"))
View(Batch_1_Bis_R_test)
library(readxl)
Batch_1_Bis_R_test <- read_excel("C:/Users/Labuser/Desktop/Batch 1 Bis R test.xlsx",
col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"text", "numeric", "numeric", "text",
"text", "text", "text", "text", "text",
"text", "numeric", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "numeric",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"text", "text"))
View(Batch_1_Bis_R_test)
library(tidyverse)
library(plotly)
#setwd("~/GitHub/PFOA_semi_quant")
source("code/PaDEL_descs_calculator.R")
source("code/reading_excel.R")
source("code/compound_eluent.R")
setwd("C:/Users/annel/Nextcloud/mudeli script ja failid/PFOA_semi_quant/PFOA_semi_quant")
#regressor----
regressor = readRDS("regressors/regressor_neg_new.rds")
descs_names = readRDS("regressors/negative_descs.rds")
#lcms data ----
filename = "data/Batch 1 Semi Quant.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
na.omit(Area) %>%
filter(Area != "N/F") %>%
mutate(Area = as.numeric(Area))
#smiles and descriptors----
SMILES_data = read_delim("data/Smiles_for_Target_PFAS.csv",
delim = ",",
col_names = TRUE)
SMILES_data = SMILES_data %>%
rename(Compound = ID) %>%
select(Compound, SMILES) %>%
na.omit()
#descs_calc_PFOA = PaDEL_original(SMILES_data)
descs_calc_PFOA = read_delim("data/descs_calc.csv",
delim = ",",
col_names = TRUE)
descs_calc_PFOA = descs_calc_PFOA %>%
select(Compound, SMILES,
#all_of(descs_names),
everything())
descs_calc_PFOA = descs_calc_PFOA %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES))
#eluent---
eluent = read_delim("data/eluent.csv",
delim = ",",
col_names = TRUE)
organic_modifier = "MeCN"
pH.aq. = 7.0
#
data = Orbitrap_dataset_raw %>%
left_join(descs_calc_PFOA)
data = data %>%
mutate(
RT = as.numeric(RT),
area_IC = Area*IC,
organic_modifier = organic_modifier,
pH.aq. = pH.aq.,
NH4 = 1, #1 if th ebuffer contains NHÂ¤ ions , 0 if not.
organic = organicpercentage(eluent,RT),
viscosity = viscosity(organic,organic_modifier),
surface_tension = surfacetension(organic,organic_modifier),
polarity_index = polarityindex(organic,organic_modifier))
#?? why are there some missing smiles- Anneli
training = data %>%
filter(!is.na(SMILES)) %>%
filter(`Theoretical Amt` != "N/F") %>%
filter(`Theoretical Amt` != "N/A") %>%
mutate(`Theoretical Amt` = as.numeric(`Theoretical Amt`)) %>%
mutate(`Theoretical Amt` = `Theoretical Amt`/MW) #correct with MW
ggplot(data = training) +
geom_point(mapping = aes(x = `Theoretical Amt`,
y = area_IC)) +
facet_wrap(~Compound, scales = "free")
training = training %>%
group_by(SMILES) %>%
mutate(slope = linear_regression(area_IC, `Theoretical Amt`)$slope) %>%
ungroup()
IE_pred = training %>%
mutate(logIE_pred = 0) %>%
na.omit()
prediction =  predict(regressor, newdata = IE_pred, predict.all = TRUE)
prediction = prediction$aggregate
IE_pred <- IE_pred %>%
mutate(logIE_pred = prediction) %>%
select(SMILES,logIE_pred, everything())
IE_pred = IE_pred %>%
select(Compound, SMILES, logIE_pred, slope, everything())
IE_slope_cor = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = logIE_pred,
y = slope,
text = Compound)) +
scale_y_log10()
IE_slope_cor
graph_1sttryPFAScal=ggplotly(IE_slope_cor)
graph_1sttryPFAScal
htmlwidgets::saveWidget(plotly::as_widget(graph_1sttryPFAScal), "1stryPFAScal.html")
slope_RT_cor = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = as.numeric(RT),
y = slope,
text = Compound)) +
scale_y_log10()
ggplotly(slope_RT_cor)
graph_slope_logP = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = ALogP,
y = slope,
text = Compound))
ggplotly(graph_slope_logP)
library(tidyverse)
library(plotly)
setwd("~/GitHub/PFOA_semi_quant")
source("code/PaDEL_descs_calculator.R")
source("code/reading_excel.R")
source("code/compound_eluent.R")
regressor = readRDS("regressors/regressor_neg_new.rds")
descs_names = readRDS("regressors/negative_descs.rds")
#lcms data ----
filename = "data/Batch 1 Semi Quant w frag.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
na.omit(Area) %>%
filter(Area != "N/F") %>%
mutate(Area = as.numeric(Area))
SMILES_data = read_delim("data/Smiles_for_Target_PFAS_semicolon.csv",
delim = ";",
col_names = TRUE)
#how many unique SMILES are there
#SMILES_data %>% select(SMILES) %>% unique()
SMILES_data = SMILES_data %>%
rename(Compound = ID) %>%
select(Compound, SMILES, Class) %>%
na.omit()
#descs_calc_PFOA = PaDEL_original(SMILES_data)
descs_calc_PFOA = read_delim("data/descs_calc.csv",
delim = ",",
col_names = TRUE)
descs_calc_PFOA = descs_calc_PFOA %>%
select(Compound, SMILES,
#all_of(descs_names),
everything())
#check number of unique analytes
#descs_calc_PFOA %>% select(SMILES) %>% unique()
descs_calc_PFOA = descs_calc_PFOA %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
#check number of unique analytes
#descs_calc_PFOA %>% select(SMILES) %>% unique()
#eluent---
eluent = read_delim("data/eluent.csv",
delim = ",",
col_names = TRUE)
organic_modifier = "MeCN"
pH.aq. = 7.0
data = Orbitrap_dataset_raw %>%
left_join(descs_calc_PFOA)
#check number of unique analytes
#data %>% select(SMILES) %>% unique()
data = data %>%
mutate(
RT = as.numeric(RT),
area_IC = Area*IC,
organic_modifier = organic_modifier,
pH.aq. = pH.aq.,
NH4 = 1, #1 if th ebuffer contains NHÂ¤ ions , 0 if not.
organic = organicpercentage(eluent,RT),
viscosity = viscosity(organic,organic_modifier),
surface_tension = surfacetension(organic,organic_modifier),
polarity_index = polarityindex(organic,organic_modifier))
#data %>% select(SMILES) %>% unique()
training = data %>%
filter(!is.na(SMILES)) %>%
filter(`Theoretical Amt` != "N/F") %>%
filter(`Theoretical Amt` != "N/A") %>%
mutate(`Theoretical Amt` = as.numeric(`Theoretical Amt`)) %>%
mutate(`Theoretical Amt` = `Theoretical Amt`/MW) #correct with MW
#print(training %>% select(Compound) %>% unique(), n=40)
ggplot(data = training) +
geom_point(mapping = aes(x = `Theoretical Amt`,
y = area_IC)) +
facet_wrap(~Compound, scales = "free") +
scale_x_log10() +
scale_y_log10()
training = training %>%
group_by(SMILES) %>%
mutate(slope = linear_regression(area_IC, `Theoretical Amt`)$slope) %>%
ungroup()
#print(training %>% select(Compound) %>% unique(), n=40)
IE_pred = training %>%
mutate(logIE_pred = 0) %>%
na.omit()
#print(IE_pred %>% select(Compound) %>% unique(), n=40)
prediction =  predict(regressor, newdata = IE_pred, predict.all = TRUE)
prediction = prediction$aggregate
IE_pred <- IE_pred %>%
mutate(logIE_pred = prediction) %>%
select(SMILES,logIE_pred, everything())
#print(IE_pred %>% select(Compound) %>% unique(), n=40)
IE_pred = IE_pred %>%
left_join(SMILES_data) %>%
select(Compound, SMILES, Class, logIE_pred, slope, everything())
#print(IE_pred %>% select(Compound) %>% unique(), n=40)
IE_slope_cor = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = logIE_pred,
y = slope,
text = Compound,
color = Class)) +
scale_y_log10() +
facet_wrap(~Class)
IE_slope_cor
graph_1sttryPFAScal=ggplotly(IE_slope_cor)
graph_1sttryPFAScal
htmlwidgets::saveWidget(plotly::as_widget(graph_1sttryPFAScal), "1stryPFAScal.html")
slope_RT_cor = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = as.numeric(RT),
y = slope,
text = Compound)) +
scale_y_log10()
ggplotly(slope_RT_cor)
graph_slope_logP = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = ALogP,
y = slope,
text = Compound)) +
facet_wrap(~Class)
ggplotly(graph_slope_logP)
setwd("~/GitHub/PFOA_semi_quant")
source("code/PaDEL_descs_calculator.R")
source("code/reading_excel.R")
source("code/compound_eluent.R")
#setwd("C:/Users/annel/Nextcloud/mudeli script ja failid/PFOA_semi_quant/PFOA_semi_quant")
#regressor----
regressor = readRDS("regressors/regressor_neg_new.rds")
descs_names = readRDS("regressors/negative_descs.rds")
#lcms data ----
filename = "data/Batch 1 Semi Quant w frag.xlsx"
Orbitrap_dataset_raw = read_excel_allsheets(filename)
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
na.omit(Area) %>%
filter(Area != "N/F") %>%
mutate(Area = as.numeric(Area))
#smiles and descriptors----
SMILES_data = read_delim("data/Smiles_for_Target_PFAS_semicolon.csv",
delim = ";",
col_names = TRUE)
#how many unique SMILES are there
#SMILES_data %>% select(SMILES) %>% unique()
SMILES_data = SMILES_data %>%
rename(Compound = ID) %>%
select(Compound, SMILES, Class) %>%
na.omit()
#descs_calc_PFOA = PaDEL_original(SMILES_data)
descs_calc_PFOA = read_delim("data/descs_calc.csv",
delim = ",",
col_names = TRUE)
descs_calc_PFOA = descs_calc_PFOA %>%
select(Compound, SMILES,
#all_of(descs_names),
everything())
#check number of unique analytes
#descs_calc_PFOA %>% select(SMILES) %>% unique()
descs_calc_PFOA = descs_calc_PFOA %>%
group_by(SMILES) %>%
mutate(IC = isotopedistribution(SMILES),
MW = molecularmass(SMILES)) %>%
ungroup()
#check number of unique analytes
#descs_calc_PFOA %>% select(SMILES) %>% unique()
#eluent---
eluent = read_delim("data/eluent.csv",
delim = ",",
col_names = TRUE)
organic_modifier = "MeCN"
pH.aq. = 7.0
data = Orbitrap_dataset_raw %>%
left_join(descs_calc_PFOA)
#check number of unique analytes
#data %>% select(SMILES) %>% unique()
data = data %>%
mutate(
RT = as.numeric(RT),
area_IC = Area*IC,
organic_modifier = organic_modifier,
pH.aq. = pH.aq.,
NH4 = 1, #1 if th ebuffer contains NHÂ¤ ions , 0 if not.
organic = organicpercentage(eluent,RT),
viscosity = viscosity(organic,organic_modifier),
surface_tension = surfacetension(organic,organic_modifier),
polarity_index = polarityindex(organic,organic_modifier))
#data %>% select(SMILES) %>% unique()
training = data %>%
filter(!is.na(SMILES)) %>%
filter(`Theoretical Amt` != "N/F") %>%
filter(`Theoretical Amt` != "N/A") %>%
mutate(`Theoretical Amt` = as.numeric(`Theoretical Amt`)) %>%
mutate(`Theoretical Amt` = `Theoretical Amt`/MW) #correct with MW
#print(training %>% select(Compound) %>% unique(), n=40)
ggplot(data = training) +
geom_point(mapping = aes(x = `Theoretical Amt`,
y = area_IC)) +
facet_wrap(~Compound, scales = "free") +
scale_x_log10() +
scale_y_log10()
training = training %>%
group_by(SMILES) %>%
mutate(slope = linear_regression(area_IC, `Theoretical Amt`)$slope) %>%
ungroup()
#print(training %>% select(Compound) %>% unique(), n=40)
IE_pred = training %>%
mutate(logIE_pred = 0) %>%
na.omit()
#print(IE_pred %>% select(Compound) %>% unique(), n=40)
prediction =  predict(regressor, newdata = IE_pred, predict.all = TRUE)
prediction = prediction$aggregate
IE_pred <- IE_pred %>%
mutate(logIE_pred = prediction) %>%
select(SMILES,logIE_pred, everything())
#print(IE_pred %>% select(Compound) %>% unique(), n=40)
IE_pred = IE_pred %>%
left_join(SMILES_data) %>%
select(Compound, SMILES, Class, logIE_pred, slope, everything())
#print(IE_pred %>% select(Compound) %>% unique(), n=40)
IE_slope_cor = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = logIE_pred,
y = slope,
text = Compound,
color = Class)) +
scale_y_log10() +
facet_wrap(~Class)
IE_slope_cor
graph_1sttryPFAScal=ggplotly(IE_slope_cor)
graph_1sttryPFAScal
htmlwidgets::saveWidget(plotly::as_widget(graph_1sttryPFAScal), "1stryPFAScal.html")
slope_RT_cor = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = as.numeric(RT),
y = slope,
text = Compound)) +
scale_y_log10()
ggplotly(slope_RT_cor)
graph_slope_logP = ggplot(data = IE_pred) +
geom_point(mapping = aes(x = ALogP,
y = slope,
text = Compound)) +
facet_wrap(~Class)
ggplotly(graph_slope_logP)
