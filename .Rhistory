eluent_file_name = "data_for_modelling/eluent.csv")
## ---- Converting slopes to logIE with PFOS as anchor ----
training = anchoring(data_to_be_anchored = data,
data_containing_anchor = "data_for_modelling/IE_training_data/190714_negative_model_logIE_data.csv")
standards = training
SMILES_list = standards %>%
select(SMILES) %>%
unique() %>%
na.omit() %>%
mutate(Name = row_number())
View(SMILES_list)
standards = standards %>%
left_join(SMILES_list)
View(standards)
write_delim(SMILES_list %>% select(SMILES) %>% unique(),
"SMILES.smi",
col_names = FALSE)
command = "java -jar PaDEL-Descriptor/PaDEL-Descriptor.jar -dir" #file name where they will be calculated
command_final = paste(command, "SMILES.smi", "-file", "descs_calc.csv", "-2d", sep =" ") #makes text for command prompt
javaOutput = system(command_final, intern = TRUE) #goes into commant prompt
#PaDEL saves the descriptors to the local folder
descs = read_delim("descs_calc.csv",
delim = ",",
col_names = TRUE)
descs = descs %>%
group_by(Name) %>%
mutate(Name = str_split(Name, pattern = "_")[[1]][length(str_split(Name, pattern = "_")[[1]])]) %>%
ungroup() %>%
mutate(Name = as.integer(Name))
View(descs)
#PaDEL saves the descriptors to the local folder
descs = read_delim("descs_calc.csv",
delim = ",",
col_names = TRUE)
View(descs)
descs = descs %>%
group_by(Name) %>%
mutate(Name = str_split(Name, pattern = "_")[[1]][length(str_split(Name, pattern = "_")[[1]])]) %>%
ungroup() %>%
mutate(Name = as.integer(Name))
descs <- descs[order(descs$Name),]
descs = descs %>%
left_join(standards) %>%
select(colnames(standards), everything()) %>%
select(-Name)
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
View(design_randomized)
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
#tibble and clean names?
coefficients = tibble(summary_model$coefficients) %>%
clean_names()
View(coefficients)
tibble(summary_model$coefficients)
summary_model$coefficients
coefficients = (summary_model$coefficients)
#tibble and clean names?
coefficients = summary_model$coefficients
View(coefficients)
coefficients = as.tibble(coefficients)
View(coefficients)
coefficients = as.tibble(summary_model$coefficients)
View(coefficients)
coefficients = as.tibble(summary_model$coefficients)
View(coefficients)
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
View(coefficients)
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=Estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=Estimate-2*std_error,
ymax=Estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
rownames(coefficients)
coefficients
coefficients = as.tibble(summary_model$coefficients)
summary_model$coefficients
rownames(summary_model$coefficients)
rownames(coefficients) = rownames(summary_model$coefficients)
coefficients
rowNames = rownames(summary_model$coefficients)
rownames(coefficients) = rowNames
coefficients
View(coefficients)
rownames(coefficients)
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
rowNames = rownames(summary_model$coefficients)
rownames(coefficients) = rowNames
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
rownames(coefficients) = rownames(summary_model$coefficients)
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
coefficients
rownames(coefficients) = rownames(summary_model$coefficients)
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
#   "taste_score" =          c( 1, 1, 2, 7, 5, 6, 2, 6, 1,  7,  1,  7, 8,  8,  7))
"taste_score" =          c( 7, 2, 5, 6, 7, 7, 2, 1, 7,  1,  1,  8, 8,  6,  1))
#########################################
design_randomized = read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/teaching/lab2.3/randomized_lemonade_order.csv", delim = ",")
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
#   "taste_score" =          c( 1, 1, 2, 7, 5, 6, 2, 6, 1,  7,  1,  7, 8,  8,  7))
"taste_score" =          c( 6, 5, 7, 1, 1, 6, 2, 7, 1,  7,  2,  8, 6,  7,  1))
#### this part will not be included #####
design_randomized <- design %>%
bind_cols(tibble(randomized_sample_nr = c( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))
#########################################
design_randomized = read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/teaching/lab2.3/randomized_lemonade_order.csv", delim = ",")
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
#   "taste_score" =          c( 1, 1, 2, 7, 5, 6, 2, 6, 1,  7,  1,  7, 8,  8,  7))
"taste_score" =          c( 7, 1, 1, 1, 2, 8, 2, 7, 6,  1,  7,  6, 7,  8,  5))
#########################################
design_randomized = read_delim("C:/Users/HelenSepman/OneDrive - Kruvelab/Helen_phd/teaching/lab2.3/randomized_lemonade_order.csv", delim = ",")
design_randomized <- design_randomized %>%
left_join(randomized_samples_taste_scores) #Join taste score data with design
# Regression model for yield ~ second order interactions
model_yield <- rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model_yield)
summary_model
coefficients = as.tibble(summary_model$coefficients) %>%
clean_names()
rownames(coefficients) = rownames(summary_model$coefficients)
barplot <- ggplot(data=coefficients,
aes(x=factor(rownames(coefficients), levels = rownames(coefficients)),
y=estimate)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=estimate-2*std_error,
ymax=estimate+2*std_error),
width=.2,
position=position_dodge(.9)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot
library(scales)
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
"taste_score" =          c( X, X, X, X, X, X, X, X, X,  X,  X,  X,  X,  X,  X)) # delete "X" and replace with score
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
"taste_score" =      c(  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA)) # delete NA and replace with score
randomized_samples_taste_scores
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
"taste_score" =      c(  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA,  NA)) # delete NA and replace with score
"randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O")
?bbd
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# write your code here - creating the design
design = bbd(k = 3,
n0 = 3)
View(design)
# write your code here - creating the design
design = bbd(k = 3,
n0 = 3,
randomize = FALSE)
design = as.tibble(design)
View(design)
# write your code here - rename variables
design = design %>%
rename("lemon_juice" = x1)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(scales)
library(rsm)
library(visreg)
library(janitor)
# write your code here - creating the design
design = bbd(k = 3,
n0 = 3,
randomize = FALSE)
design = as.tibble(design)
# write your code here - rename variables
design = design %>%
rename("lemon_juice" = x1,
"sugar_syrup" = x2,
"water_tap" = x3)
# write your code here - decode the variables
design = design %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(0,8)))
# write your code here - decode the variables
design = design %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(0,8)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(0,8)))
# write your code here - decode the variables
design = design %>%
mutate(lemon_juice_tbs = rescale(lemon_juice, to = c(0,8)),
sugar_syrup_tbs = rescale(sugar_syrup, to = c(0,8)),
tap_water_percentage = rescale(water_tap, to = c(0,100)))
# write your code here - read in the file with randomized order and join the tibble with taste scores
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
View(design_randomized)
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
"taste_score" =      c(  7,   5,   6,   1,   2,  10,   3,   9,   8,   6,   7,  10,   7,   6,   1)) # delete NA and replace with score
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
"taste_score" =      c(  7,   5,   6,   1,   2,  10,   3,   9,   8,   6,   7,  10,   7,   6,   1)) # delete NA and replace with score
View(randomized_samples_taste_scores)
# Insert your taste score results for each sample
randomized_samples_taste_scores = tibble("randomized_order" = c( "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"),
"taste_score" =      c(  7,   5,   6,   1,   2,  10,   3,   9,   8,   6,   7,  10,   7,   6,   1)) # delete NA and replace with score
View(randomized_samples_taste_scores)
# write your code here - read in the file with randomized order and join the tibble with taste scores
design_randomized = read_delim("randomized_lemonade_order.csv", delim = ",")
View(design_randomized)
design_randomized = design_randomized %>%
left_join(randomized_samples_taste_scores)
View(design_randomized)
?rsm
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap))
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model)
summary_model
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ FO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model)
summary_model
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ FO(lemon_juice, sugar_syrup, water_tap)
TWI(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ FO(lemon_juice, sugar_syrup, water_tap)
+TWI(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model)
summary_model
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model)
summary_model
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(lemon_juice), data = design_randomized)
model
summary(model)
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(lemon_juice, sugar_syrup), data = design_randomized)
summary(model)
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(lemon_juice, sugar_syrup), data = design_randomized)
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(lemon_juice) + PQ(sugar_syrup), data = design_randomized)
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(lemon_juice, sugar_syrup), data = design_randomized)
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(sugar_syrup), data = design_randomized)
model = rsm(taste_score ~ FO(lemon_juice) +
TWI(lemon_juice, sugar_syrup) +
PQ(sugar_syrup), data = design_randomized)
model = rsm(taste_score ~ lemon_juice + lemon_juice*sugar_syryp + sugar_syrup*sugar_syrup, data = design_randomized)
model = rsm(taste_score ~ lemon_juice + lemon_juice*sugar_syrup + sugar_syrup*sugar_syrup, data = design_randomized)
summary(model)
model = rsm(taste_score ~ lemon_juice + lemon_juice*sugar_syrup + sugar_syrup^2, data = design_randomized)
summary(model)
model = lm(taste_score ~ lemon_juice + lemon_juice*sugar_syrup + sugar_syrup^2, data = design_randomized)
summary(model)
model = lm(taste_score ~ lemon_juice + lemon_juice*sugar_syrup + sugar_syrup*sugar_syrup, data = design_randomized)
model = lm(taste_score ~ lemon_juice + lemon_juice*sugar_syrup + sugar_syrup*sugar_syrup, data = design_randomized)
summary(model)
# write your code here - regression model for yield ~ second order interactions
model = rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model)
summary_model
model = rsm(taste_score ~  FO(sugar_syrup, sugar_syrup) +
PQ(sugar_syrup), data = design_randomized)
summary(model)
model = rsm(taste_score ~  FO(lemon_juice, sugar_syrup) +
PQ(sugar_syrup), data = design_randomized)
summary(model)
lm.default(formula = taste_score ~ lemon_juice + sugar_syrup^2, data = design_randomized)
lm(formula = taste_score ~ lemon_juice + sugar_syrup^2, data = design_randomized)
model = lm(formula = taste_score ~ lemon_juice + sugar_syrup^2, data = design_randomized)
summary(model)
model = lm(formula = taste_score ~ lemon_juice + sugar_syrup*sugar_syrup, data = design_randomized)
summary(model)
model = lm(formula = taste_score ~ lemon_juice + sugar_syrup + sugar_syrup*sugar_syrup, data = design_randomized)
summary(model)
model = lm(formula = taste_score ~ lemon_juice + sugar_syrup + sugar_syrup^2, data = design_randomized)
summary(model)
model = lm(formula = taste_score ~ lemon_juice*sugar_syrup * sugar_syrup^2, data = design_randomized)
summary(model)
# write your code here - re-modelling
model = rsm(taste_score ~ SO(lemon_juice, sugar_syrup, water_tap), data = design_randomized)
summary_model = summary(model)
summary_model
# write your code here - re-modelling
model = rsm(taste_score ~ FO(lemon_juice, sugar_syrup) + PQ(lemon_juice), data = design_randomized)
summary_model = summary(model)
summary_model
# write your code here - re-modelling
model = rsm(taste_score ~ FO(lemon_juice, sugar_syrup) + PQ(lemon_juice), data = design_randomized)
visreg2d(model, "lemon_juice", "sugar_syrup", plot.type = "persp")
visreg2d(model, "lemon_juice", "sugar_syrup", plot.type = "rgl")
summary_model$coefficients
coef = summary_model$coefficients
row_names = rownames(coef)
rowname(coef) = row_names
rownames(coef) = row_names
coef
# write your code here - coefficients as bar plot
coef = summary_model$coefficients
row_names = rownames(coef)
rownames(coef) = row_names
coef = coef %>%
ggplot(data = coef) +
geom_bar(mapping = aes(x=),
stat="identity")
coef = coef %>%
mutate(rowNames = rownames(coef))
coef = coef %>%
mutate(rowNames = row_names)
row_names = rownames(coef)
coef = summary_model$coefficients
coef = as.tibble(summary_model$coefficients) %>%
clean_names()
ggplot(data = coef,
mapping = aes(x=factor(rownames(coef)), y = estimate)
) +
geom_bar(mapping = aes(x=),
stat="identity")
rownames(coef) = rownames(summary_model$coefficients)
ggplot(data = coef,
mapping = aes(x=factor(rownames(coef)), y = estimate)
) +
geom_bar(mapping = aes(x=),
stat="identity")
?geom_errorbar
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant")
source("code/functions.R")
extrafont::loadfonts(device = "win")
extrafont::loadfonts(device = "win")
font <- extrafont::choose_font("Khula")
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(caret)
library(caTools)
library(leaps)
library(tidyverse)
#importing the data
dataset = read_delim("Cao2015_SI.csv")
View(dataset)
dataset = dataset %>%
drop_na()
View(dataset)
#move columns not used for modelling to the end of the dataframe
dataset = dataset %>%
relocate(c(cid, compound, smiles, RT), .after = last_col())
View(dataset)
#remove the highly correlated variables
correlationMatrix = cor(dataset %>%
select(-c(cid, compound, smiles, RT)))
View(correlationMatrix)
highlyCorrelated = findCorrelation(correlationMatrix,
cutoff = 0.75)
highlyCorrelated
dataset = dataset %>%
select(-highlyCorrelated)
View(dataset)
#preparing the training and test set with 80/20 ratio
set.seed(123)
dataset = dataset %>%
mutate(split = sample.split(RT, SplitRatio = 0.8))
View(dataset)
?train
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(caret)
library(caTools)
library(leaps)
library(tidyverse)
#importing the data
dataset = read_delim("Cao2015_SI.csv")
dataset = dataset %>%
drop_na()
#move columns not used for modelling to the end of the dataframe
dataset = dataset %>%
relocate(c(cid, compound, smiles, RT), .after = last_col())
#remove the highly correlated variables
correlationMatrix = cor(dataset %>%
select(-c(cid, compound, smiles, RT)))
highlyCorrelated = findCorrelation(correlationMatrix,
cutoff = 0.75)
dataset = dataset %>%
select(-highlyCorrelated)
#preparing the training and test set with 80/20 ratio
set.seed(123)
dataset = dataset %>%
mutate(split = sample.split(RT, SplitRatio = 0.8))
#Setting up the cross-validation method
fitControl = trainControl(
method = "repeatedcv",
repeats = 2,
number = 5
)
#training
set.seed(123)
model = train(RT ~ .,
dataset %>%
filter(split == TRUE) %>%
select(-c(cid, compound, smiles, split)),
method = "glmStepAIC",
trControl = fitControl)
#summary of modelling
print(model)
summary(model)
model
#training
set.seed(123)
model = train(RT ~ .,
dataset %>%
filter(split == TRUE) %>%
select(-c(cid, compound, smiles, split)),
method = "glmStepAIC",
trControl = fitControl)
model$finalModel
