sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
#population-------
per_cent_faulty = 10
n_all = 10000
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
#------ n = 10-----
n_sample = 10
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 20-----
n_sample = 20
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 100-----
n_sample = 100
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(0, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
#population-------
per_cent_faulty = 10
n_all = 10000
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
#------ n = 10-----
n_sample = 10
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 20-----
n_sample = 20
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 100-----
n_sample = 100
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
dataset_field_study = tibble(n = 2:100,
lower_confidence_interval = mean_log_pfas + qt(p = 0.025, df = n-1)*sd_log_pfas/sqrt(n),
upper_confidence_interval = mean_log_pfas + qt(p = 0.975, df = n-1)*sd_log_pfas/sqrt(n),
width_conf_int = upper_confidence_interval - lower_confidence_interval)
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
#population-n = 10000------
per_cent_faulty = 10
n_all = 10000
n_sample = 10
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#population-n = 100------
per_cent_faulty = 10
n_all = 100
n_sample = 10
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
#population-------
per_cent_faulty = 10
n_all = 10000
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
#------ n = 10-----
n_sample = 10
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 20-----
n_sample = 20
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#------ n = 100-----
n_sample = 100
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
scale_x_log10()
dataset = dataset %>%
mutate(log_pfas = log10(pfas_ng_g))
#write your code here
mean_log_pfas = mean(dataset$log_pfas)
sd_log_pfas = sd(dataset$log_pfas)
dataset_field_study = tibble(n = 2:100,
lower_confidence_interval = mean_log_pfas + qt(p = 0.025, df = n-1)*sd_log_pfas/sqrt(n),
upper_confidence_interval = mean_log_pfas + qt(p = 0.975, df = n-1)*sd_log_pfas/sqrt(n),
width_conf_int = upper_confidence_interval - lower_confidence_interval)
View(dataset_field_study)
dataset_field_study = dataset_field_study %>%
mutate(cost = 20000 + n*350 + 50000 + 100*n)
ggplot(data = dataset_field_study,
mapping = aes(x = n)) +
geom_line(mapping = aes(y = width_conf_int)) +
geom_line(mapping = aes(y = cost/10000)) +
scale_y_continuous(
name = "First Axis",
sec.axis = sec_axis(~.*10000,
name = "cost")
)
ggplot(data = dataset_field_study,
mapping = aes(x = n)) +
geom_line(mapping = aes(y = width_conf_int)) +
geom_line(mapping = aes(y = cost/10000)) +
scale_y_continuous(
name = "Confidence interval (log-units)",
sec.axis = sec_axis(~.*10000,
name = "cost")
)
#library(janitor)
#library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
#population-n = 10000------
per_cent_faulty = 10
n_all = 10000
n_sample = 10
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#population-n = 100------
per_cent_faulty = 10
n_all = 100
n_sample = 10
n_faulty = per_cent_faulty * n_all / 100
n_ok = n_all - n_faulty
population = c(rep("ok", n_ok),
rep("faulty", n_faulty)) %>%
sample() #shuffle the order of the items
sample_summary = tibble()
for (i in 1:100) {
sample_this = sample(population, n_sample) %>%
as.tibble()
sample_this = sample_this %>%
group_by(value) %>%
summarise(per_cent_faulty_in_sample = n() / n_sample *100) %>%
ungroup() %>%
filter(value == "faulty")
if (dim(sample_this)[1] == 0) {
sample_this = tibble(value = "faulty",
per_cent_faulty_in_sample = 0)
}
sample_summary = sample_summary %>%
bind_rows(sample_this)
}
histogram = ggplot(data = sample_summary) +
geom_histogram(mapping = aes(x = per_cent_faulty_in_sample),
binwidth = 5,
fill = "blue") +
xlim(-5, 50) +
ylim(0, 100) +
labs(x = "% faulty items")
histogram
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
knitr::opts_chunk$set(echo = TRUE)
#library(janitor)
#library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
dataset = read_excel("PFAS_blood_level_pre-study.xlsx"
)
?clean_names
??clean_names
knitr::opts_chunk$set(echo = TRUE)
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
library(janitor)
library(readxl)
library(tidyverse) #tidyverse helps us to write concise code, is your best friend when processing any data in R
#write your code here
dataset = read_excel("PFAS_blood_level_pre-study.xlsx") %>%
clean_names()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
geom_density()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
geom_density() +
scale_x_log10()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
geom_histogram() +
geom_density()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
#geom_histogram() +
geom_density()
ggplot(data = dataset,
mapping = aes(x = pfas_ng_g)) +
#geom_histogram() +
geom_density() +
scale_x_log10()
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant")
source("code/functions.R")
install.packages("rcdk")
library(rcdk)
