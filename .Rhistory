tox_lit = c(4, 13, 19, 18),
tox_exp = c(3, 11, 8, 14),
tox_sil = c(1, 4, 14, 11),
quant = c(10, 10, 12, 19))
plot = ggplot(data = NTS_summary) +
# all
geom_line(mapping = aes(x = years,
y = all_articles), size = 2, color = "#023047") +
# tox
geom_line(mapping = aes(x = years,
y = tox), size = 2, color = "#fb8500") +
geom_line(mapping = aes(x = years,
y = tox_lit)) +
geom_line(mapping = aes(x = years,
y = tox_exp)) +
geom_line(mapping = aes(x = years,
y = tox_sil)) +
# quant
geom_line(mapping = aes(x = years,
y = quant) size = 2, color = "#219ebc") +
my_theme
plot = ggplot(data = NTS_summary) +
# all
geom_line(mapping = aes(x = years,
y = all_articles), size = 2, color = "#023047") +
# tox
geom_line(mapping = aes(x = years,
y = tox), size = 2, color = "#fb8500") +
geom_line(mapping = aes(x = years,
y = tox_lit)) +
geom_line(mapping = aes(x = years,
y = tox_exp)) +
geom_line(mapping = aes(x = years,
y = tox_sil)) +
# quant
geom_line(mapping = aes(x = years,
y = quant), size = 2, color = "#219ebc") +
my_theme
plot
plot = ggplot(data = NTS_summary) +
# all
geom_line(mapping = aes(x = years,
y = all_articles), size = 2, color = "#023047") +
# tox
geom_line(mapping = aes(x = years,
y = tox), size = 2, color = "#fb8500") +
geom_line(mapping = aes(x = years,
y = tox_lit), size = 2, color = "#ffb703") +
geom_line(mapping = aes(x = years,
y = tox_exp), size = 2, color = "#ffb703") +
geom_line(mapping = aes(x = years,
y = tox_sil), size = 2, color = "#ffb703") +
# quant
geom_line(mapping = aes(x = years,
y = quant), size = 2, color = "#219ebc") +
my_theme
plot
plot = ggplot(data = NTS_summary) +
# all
geom_line(mapping = aes(x = years,
y = all_articles), size = 2, color = "#023047") +
# tox
geom_line(mapping = aes(x = years,
y = tox), size = 2, color = "#fb8500") +
geom_line(mapping = aes(x = years,
y = tox_lit), size = 1, color = "#ffb703") +
geom_line(mapping = aes(x = years,
y = tox_exp), size = 1, color = "#ffb703") +
geom_line(mapping = aes(x = years,
y = tox_sil), size = 1, color = "#ffb703") +
# quant
geom_line(mapping = aes(x = years,
y = quant), size = 2, color = "#219ebc") +
my_theme
plot
NTS_summary = tibble(years = c(2019, 2020, 2021, 2022),
all_articles = c(35, 55, 58, 95),
tox = c(8, 26, 30, 38),
tox_lit = c(4, 13, 19, 18),
tox_exp = c(3, 11, 8, 14),
tox_sil = c(1, 4, 14, 11),
quant = c(20, 30, 42, 49))
plot = ggplot(data = NTS_summary) +
# all
geom_line(mapping = aes(x = years,
y = all_articles), size = 2, color = "#023047") +
# tox
geom_line(mapping = aes(x = years,
y = tox), size = 2, color = "#fb8500") +
geom_line(mapping = aes(x = years,
y = tox_lit), size = 1, color = "#ffb703") +
geom_line(mapping = aes(x = years,
y = tox_exp), size = 1, color = "#ffb703") +
geom_line(mapping = aes(x = years,
y = tox_sil), size = 1, color = "#ffb703") +
# quant
geom_line(mapping = aes(x = years,
y = quant), size = 2, color = "#219ebc") +
my_theme
plot
barplot(NTS_summary,                                         # Create grouped barchart
col = c("#023047", "#fb8500"),
beside = TRUE)
nts_summary_gathered = NTS_summary %>%
gather("year", "values")
View(nts_summary_gathered)
nts_summary_gathered = NTS_summary %>%
gather("data_type", "values", -years)
View(nts_summary_gathered)
# Use position=position_dodge()
ggplot(data=nts_summary_gathered, aes(x=years, y=values, fill=data_type)) +
geom_bar(stat="identity", position=position_dodge())
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=years)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_continuous("#fb8500", "#ffb703", "#023047", "#219ebc", "#8ecae6")
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=years)) +
geom_bar(stat="identity", position=position_dodge()) #+
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) #+
barplot
NTS_summary = tibble(years = c(2019, 2020, 2021, 2022),
all_articles = c(35, 55, 58, 95),
tox = c(8, 26, 30, 38),
#tox_lit = c(4, 13, 19, 18),
#tox_exp = c(3, 11, 8, 14),
#tox_sil = c(1, 4, 14, 11),
quant = c(20, 30, 42, 49))
nts_summary_gathered = NTS_summary %>%
gather("data_type", "values", -years)
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) #+
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_continuous("#fb8500", "#ffb703", "#023047", "#219ebc", "#8ecae6")
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_continuous("#fb8500", "#023047", "#219ebc")
barplot
ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge())
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_continuous("#fb8500", "#023047", "#219ebc", "#ffb703")
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual("#fb8500", "#023047", "#219ebc", "#ffb703")
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual("#fb8500", "#023047", "#219ebc", "#ffb703")
barplot
ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge())
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(c("#fb8500", "#023047", "#219ebc", "#ffb703"))
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(c("#fb8500", "#023047", "#219ebc", "#ffb703"))
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
my_theme
barplot
#----theme----
my_theme <- theme(
#remove the background of the plot
plot.background = element_blank(),
#and from the panel as well
panel.background = element_blank(),
#define the width and color of the axis on the plot
axis.line = element_line(linewidth = 1,
color = basecolor),
#if you use plot title you can specify parameters here
#PS! use plot title only if you send or show the plot on its own
#for plots on the slide/thesis use slide title and figure caption
# plot.title = element_text(color = basecolor,
#                           size = 14,
#                           face = "bold"),
#specify the size and style of the text on the plot, e.g. axis title
text = element_text(family = font,
size = fontsize,
color = basecolor),
legend.key = element_blank(),
strip.background = element_blank(),
#strip.text = element_blank(),
strip.text = element_text(family = font,
size = fontsize,
color = basecolor),
#to remove or adjust the position of the legend
#"none" - is no legend; "top" "bottom", "right", "left";
#or by coordinates.
#c(0, 0) corresponds to the "bottom left"
#and c(1, 1) corresponds to the "top right" position.
#legend.position = "none",
#legend.position = c(0.9, 0.25),
#if you have a legend title and text you can specify font size here
#here it indicates no legend title
legend.title = element_blank(),
legend.text = element_text(family = font,
size = fontsize,
color = basecolor),
#specify axis marks text
axis.text = element_text(family = font,
size = fontsize,
color = basecolor),
#remove tick marks
#axis.ticks = element_blank(),
#define the ratio of x and y axis
#PS! for scatter plots it needs to be 1!
#for predicted - measured plots also adjust the ranges!
aspect.ratio = 1,
#adjust the position of the axis title
axis.title.x = element_text(hjust = c(1), vjust = c(0)),
axis.title.y = element_text(hjust = c(1), vjust = c(1))
)
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_bar(stat="count") +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_bar(stat="count") +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_bar(stat="years") +
my_theme
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_bar(stat="values") +
my_theme
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_bar(stat="count") +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=-0.5, hjust = 0.2, size = 6, angle = 30) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=-0.5, hjust = 0.2, size = 3, angle = 30) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=-0.5, hjust = 0.2, size = 4) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=0, hjust = 0.2, size = 4) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=-0.5, hjust = 0, size = 4) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=-0.5, hjust = 1, size = 4) +
my_theme
barplot
# Use position=position_dodge()
barplot = ggplot(data=nts_summary_gathered, aes(x=data_type, y=values, fill=as.factor(years))) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("#fb8500", "#023047", "#219ebc", "#ffb703")) +
geom_text(aes(label=values), position=position_dodge(width=1), vjust=-0.5, hjust = 0.6, size = 4) +
my_theme
barplot
1.66-(-0.92)
10^2.58
setwd("C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant")
source("code/functions.R")
library(caTools)
library(tidyverse)
library(caret)
library(plotly)
library(cowplot)
## ---- Reading in LC-MS data of calibration solutions ----
Orbitrap_dataset_raw = read_excel_allsheets(filename = "data_for_modelling/Batch 1 Semi Quant w frag.xlsx")
Orbitrap_dataset_raw = Orbitrap_dataset_raw %>%
group_by(Compound) %>%
mutate(Theoretical_amt = case_when(
Filename == "2020071205-cal21" ~ mean(Theoretical_amt[Filename=="2020071205-cal22"]),
TRUE ~ Theoretical_amt))%>%
ungroup() %>%
filter(Theoretical_amt != "NaN")
## ---- Reading in SMILES for calibration compounds, removing NAs and adducts, mono PAPs, HFPO-DA ----
SMILES_data = read_SMILES(filename = "data_for_modelling/Smiles_for_Target_PFAS_semicolon.csv",
compounds_to_be_removed_as_list = c("HFPO-DA", "MeFOSE", "EtFOSE", "10:2 mono PAP", "4:2 mono PAP", "6:2 mono PAP", "8:2 mono PAP"))
## ---- Joining all collected data to one tibble, removing missing values, calculating slopes ----
data = Orbitrap_dataset_raw %>%
left_join(SMILES_data) %>%
drop_na(SMILES) %>%
mutate(RT = as.numeric(RT),
area_IC = Area*IC,
Theoretical_conc_uM = Theoretical_amt/Molecular_weight) %>%
group_by(SMILES, Compound) %>%
summarize(slope = linear_regression(area_IC, Theoretical_conc_uM, remove_lowest_conc = TRUE)$slope,
RT = mean(RT)) %>%
ungroup()
data = add_mobile_phase_composition(data = data,
eluent_file_name = "data_for_modelling/eluent.csv")
## ---- Converting slopes to logIE with PFOS as anchor ----
training = anchoring(data_to_be_anchored = data,
data_containing_anchor = "data_for_modelling/IE_training_data/190714_negative_model_logIE_data.csv")
length(unique(training$SMILES))
View(training)
logIE_pred_model_train_test <- readRDS(file="models/230329_logIE_model_withPFAS_train_test.RData")
# mean error
logIE_pred_model_train_test_error <- logIE_pred_model_train_test$data$test_set %>% #PFAS_LOO_data %>%
#filter(data_type == "PFAS") %>%
mutate(pred_error = case_when(10^logIE > 10^logIE_predicted ~ 10^logIE/10^logIE_predicted,
TRUE ~ 10^logIE_predicted/10^logIE)) %>%
# group_by(name) %>%
# mutate(mean_pred_error = mean(pred_error)) %>%
# ungroup() %>%
select(pred_error, everything())
View(logIE_pred_model_train_test_error)
# mean error
logIE_pred_model_train_test_error <- logIE_pred_model_train_test$data$test_set %>% #PFAS_LOO_data %>%
#filter(data_type == "PFAS") %>%
mutate(pred_error = case_when(10^logIE > 10^logIE_predicted ~ 10^logIE/10^logIE_predicted,
TRUE ~ 10^logIE_predicted/10^logIE)) %>%
# group_by(name) %>%
# mutate(mean_pred_error = mean(pred_error)) %>%
# ungroup() %>%
select(pred_error, logIE, logIE_predicted, name, everything())
View(logIE_pred_model_train_test_error)
logIE_pred_model_train_test <- readRDS(file="models/230329_logIE_model_withPFAS_train_test.RData")
logIE_pred_model_train_test$data$test_set
logIE_pred_model_train_test$data$training_set
# mean error
logIE_pred_model_train_test_error <- logIE_pred_model_train_test$data$training_set %>% #PFAS_LOO_data %>%
#filter(data_type == "PFAS") %>%
mutate(pred_error = case_when(10^logIE > 10^logIE_predicted ~ 10^logIE/10^logIE_predicted,
TRUE ~ 10^logIE_predicted/10^logIE)) %>%
# group_by(name) %>%
# mutate(mean_pred_error = mean(pred_error)) %>%
# ungroup() %>%
select(pred_error, logIE, logIE_predicted, name, everything())
# install.packages("extrafont")
# font_import(paths = "C:/Windows/Fonts")
library(tidyverse)
library(scales)
library(cowplot)
library(grid)
library(gridExtra)
library(patchwork)
library(lsa)
library(readxl)
#specify your working directory here:
admin = "C:/Users/HelenSepman/OneDrive - Kruvelab/Documents/GitHub/PFOA_semi_quant"
setwd(admin)
basecolor <- "#293241"
datapoints_color1 <- "#274c77"
datapoints_color2 <- "#6096ba"
datapoints_color3 <- "#a3cef1"
datapoints_color4 <- "#8b8c89"
highlighter_color <- "#ee6c4d"
extrafont::loadfonts(device = "win")
font <- extrafont::choose_font("Arial")
fontsize <- 12
#----theme----
my_theme <- theme(
#remove the background of the plot
plot.background = element_blank(),
#and from the panel as well
panel.background = element_blank(),
#define the width and color of the axis on the plot
axis.line = element_line(linewidth = 1,
color = basecolor),
#if you use plot title you can specify parameters here
#PS! use plot title only if you send or show the plot on its own
#for plots on the slide/thesis use slide title and figure caption
# plot.title = element_text(color = basecolor,
#                           size = 14,
#                           face = "bold"),
#specify the size and style of the text on the plot, e.g. axis title
text = element_text(family = font,
size = fontsize,
color = basecolor),
legend.key = element_blank(),
strip.background = element_blank(),
#strip.text = element_blank(),
strip.text = element_text(family = font,
size = fontsize,
color = basecolor),
#to remove or adjust the position of the legend
#"none" - is no legend; "top" "bottom", "right", "left";
#or by coordinates.
#c(0, 0) corresponds to the "bottom left"
#and c(1, 1) corresponds to the "top right" position.
legend.position = "none",
#legend.position = c(0.9, 0.25),
#if you have a legend title and text you can specify font size here
#here it indicates no legend title
legend.title = element_blank(),
legend.text = element_text(family = font,
size = fontsize,
color = basecolor),
#specify axis marks text
axis.text = element_text(family = font,
size = fontsize,
color = basecolor),
#remove tick marks
#axis.ticks = element_blank(),
#define the ratio of x and y axis
#PS! for scatter plots it needs to be 1!
#for predicted - measured plots also adjust the ranges!
#aspect.ratio = 1,
#adjust the position of the axis title
axis.title.x = element_text(hjust = c(1), vjust = c(0)),
axis.title.y = element_text(hjust = c(1), vjust = c(1))
)
# read in model
logIE_pred_model_PFAS_allData <- readRDS(file="models/230329_logIE_model_withPFAS_train_test.RData")
#correlation plot
IE_slope_cor = ggplot() +
geom_point(data = logIE_pred_model_PFAS_allData$data$training_set,
mapping = aes(logIE, logIE_predicted),
color = "#274c77",
alpha = 0.7,
size = 2) +
geom_point(data = logIE_pred_model_PFAS_allData$data$test_set,
mapping = aes(logIE, logIE_predicted),
color = "#ee6c4d",
alpha = 0.7,
size = 2) +
geom_abline(intercept = -1, slope = 1) +
geom_abline(intercept = 1, slope = 1) +
geom_abline(intercept = 0, slope = 1) +
ylab(substitute(paste("log", italic("IE"))["predicted"]))  +
xlab(substitute(paste("log", italic("IE"))["measured"])) +
theme(plot.title = element_text(size = fontsize),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line.y = element_line(size = 1, color = basecolor),
axis.line.x = element_line(size = 1, color = basecolor),
#axis.ticks = element_line(color = basecolor),
axis.title.x = element_text(size=fontsize),
axis.title.y = element_text(size=fontsize),
aspect.ratio = 1,
axis.text = element_text(family = font,
size = fontsize,
color = basecolor),
legend.key = element_blank(),
strip.background = element_blank(),
text = element_text(family = font,
size = fontsize,
color = basecolor))+
facet_wrap(~data_type) +
#annotation_logticks(colour = basecolor) +
scale_x_continuous(limits = c(-4, 5), breaks=c(-4, -2, 0, 2, 4))+
scale_y_continuous(limits = c(-4, 5), breaks=c(-4, -2, 0, 2, 4))+
# xlim(c(-4,5)) +
# ylim(c(-4,5)) +
my_theme
IE_slope_cor
